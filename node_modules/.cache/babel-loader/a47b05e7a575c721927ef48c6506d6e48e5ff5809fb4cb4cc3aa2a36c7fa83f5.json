{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KULDEEP\\\\Downloads\\\\flashcard-web-app-full\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport Flashcard from \"./components/Flashcard\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [decks, setDecks] = useState({\n    Uncategorized: [],\n    Learned_Uncategorized: []\n  });\n  const [activeDeck, setActiveDeck] = useState(null); // { folder, deck }\n  const [history, setHistory] = useState([]); // array of { folder, deckId, card }\n  const [showFolderInput, setShowFolderInput] = useState(false);\n  const [newFolderName, setNewFolderName] = useState(\"\");\n  const [expandedFolders, setExpandedFolders] = useState(new Set());\n\n  // Load/save\n  useEffect(() => {\n    const saved = localStorage.getItem(\"flashcardDecks\");\n    if (saved) {\n      try {\n        setDecks(JSON.parse(saved));\n      } catch {\n        // ignore parse issues\n      }\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"flashcardDecks\", JSON.stringify(decks));\n  }, [decks]);\n\n  // Ensure a learned shadow folder exists (uses setDecks updater to avoid stale reads)\n  const ensureShadowFolder = folder => {\n    const shadow = `Learned_${folder}`;\n    setDecks(prev => {\n      if (prev[shadow]) return prev;\n      return {\n        ...prev,\n        [shadow]: []\n      };\n    });\n  };\n\n  // File upload\n  const handleFileUpload = event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        const parsedCards = (results.data || []).filter(row => row.question || row.Question).map(row => ({\n          question: (row.question || row.Question || \"\").trim(),\n          answer: (row.answer || row.Answer || \"\").trim()\n        })).filter(c => c.question && c.answer);\n        if (!parsedCards.length) return;\n        const newDeck = {\n          id: Date.now(),\n          name: file.name.replace(\".csv\", \"\"),\n          cards: parsedCards,\n          stats: {\n            swipes: 0,\n            knew: 0,\n            didntKnow: 0\n          },\n          currentIndex: 0,\n          finished: false\n        };\n        setDecks(prev => {\n          const updated = JSON.parse(JSON.stringify(prev));\n          updated.Uncategorized = [...(updated.Uncategorized || []), newDeck];\n          if (!updated[\"Learned_Uncategorized\"]) updated[\"Learned_Uncategorized\"] = [];\n          return updated;\n        });\n      }\n    });\n  };\n\n  // Create folder (creates its learned_ sibling)\n  const handleCreateFolder = () => {\n    const name = newFolderName === null || newFolderName === void 0 ? void 0 : newFolderName.trim();\n    if (!name) return;\n    setDecks(prev => {\n      if (prev[name]) return prev; // already exists\n      const updated = JSON.parse(JSON.stringify(prev));\n      updated[name] = [];\n      updated[`Learned_${name}`] = [];\n      return updated;\n    });\n    setNewFolderName(\"\");\n    setShowFolderInput(false);\n  };\n\n  // Move deck between folders (also move its learned shadow deck entry)\n  const moveDeckToFolder = (deckId, fromFolder, toFolder) => {\n    if (!toFolder || fromFolder === toFolder) return;\n    setDecks(prev => {\n      const updated = JSON.parse(JSON.stringify(prev));\n      if (!updated[fromFolder]) return prev;\n      const idx = updated[fromFolder].findIndex(d => d.id === deckId);\n      if (idx === -1) return prev;\n      const [moved] = updated[fromFolder].splice(idx, 1);\n      if (!updated[toFolder]) updated[toFolder] = [];\n      updated[toFolder].push(moved);\n\n      // move shadow deck entry if present\n      const shadowFrom = `Learned_${fromFolder}`;\n      const shadowTo = `Learned_${toFolder}`;\n      if (updated[shadowFrom]) {\n        const sidx = updated[shadowFrom].findIndex(sd => sd.id === deckId);\n        if (sidx !== -1) {\n          const [sdMoved] = updated[shadowFrom].splice(sidx, 1);\n          if (!updated[shadowTo]) updated[shadowTo] = [];\n          updated[shadowTo].push(sdMoved);\n          if (updated[shadowFrom].length === 0) delete updated[shadowFrom];\n        }\n      } else {\n        if (!updated[shadowTo]) updated[shadowTo] = [];\n      }\n      return updated;\n    });\n  };\n\n  //Toggle between folders\n  const toggleFolder = folder => {\n    setExpandedFolders(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(folder)) {\n        newSet.delete(folder);\n      } else {\n        newSet.add(folder);\n      }\n      return newSet;\n    });\n  };\n\n  // Helper: push to history\n  const pushHistory = (folder, deckId, card) => {\n    setHistory(prev => [...prev, {\n      folder,\n      deckId,\n      card\n    }]);\n  };\n\n  // ------------------ Swipe handler ------------------\n  const handleSwipe = direction => {\n    if (!activeDeck) return;\n    const {\n      folder,\n      deck\n    } = activeDeck;\n    if (!deck || !Array.isArray(deck.cards)) return;\n    const currentCard = deck.cards[deck.currentIndex];\n    if (!currentCard) return;\n    const isShadow = folder.startsWith(\"Learned_\");\n    const originalFolder = isShadow ? folder.replace(\"Learned_\", \"\") : folder;\n    const learnedFolder = `Learned_${originalFolder}`;\n\n    // deep clone\n    const updated = JSON.parse(JSON.stringify(decks));\n    if (!updated[originalFolder]) {\n      // safety: nothing to do\n      return;\n    }\n    if (!updated[learnedFolder]) updated[learnedFolder] = [];\n\n    // working with main deck\n    if (!isShadow) {\n      const dIdx = updated[folder].findIndex(d => d.id === deck.id);\n      if (dIdx === -1) return;\n      const d = updated[folder][dIdx];\n      d.stats = d.stats || {\n        swipes: 0,\n        knew: 0,\n        didntKnow: 0\n      };\n      d.stats.swipes++;\n      if (direction === \"right\") {\n        // Knew it: remove from main deck, add to learned_<folder>\n        d.stats.knew = (d.stats.knew || 0) + 1;\n        // remove the card at currentIndex\n        d.cards.splice(deck.currentIndex, 1);\n\n        // find or create learned shadow deck entry with same id\n        let sdList = updated[learnedFolder];\n        let sd = sdList.find(s => s.id === d.id);\n        if (sd) {\n          sd.cards.push(currentCard);\n          sd.finished = false;\n        } else {\n          sdList.push({\n            id: d.id,\n            name: d.name,\n            cards: [currentCard],\n            stats: {\n              swipes: 0,\n              knew: 0,\n              didntKnow: 0\n            },\n            currentIndex: 0,\n            finished: false\n          });\n        }\n      } else {\n        // Didn't know in main deck: remove and add to end\n        d.stats.didntKnow = (d.stats.didntKnow || 0) + 1;\n        d.cards.splice(deck.currentIndex, 1);\n        d.cards.push(currentCard);\n        // ensure card is not lingering in any learned deck\n        Object.keys(updated).forEach(f => {\n          if (f.startsWith(\"Learned_\")) {\n            updated[f] = (updated[f] || []).map(sd => {\n              sd.cards = sd.cards.filter(c => c.question !== currentCard.question);\n              return sd;\n            });\n          }\n        });\n      }\n\n      // adjust finished & index\n      if (d.cards.length === 0) {\n        d.finished = true;\n        d.currentIndex = 0;\n      } else {\n        d.finished = false;\n        // if we removed a card that had index >= length, reset to 0\n        d.currentIndex = d.currentIndex % d.cards.length;\n      }\n\n      // commit\n      updated[folder][dIdx] = d;\n      setDecks(updated);\n      pushHistory(folder, d.id, currentCard);\n\n      // set the active deck to the updated deck object (fresh reference)\n      const newActiveDeckObj = updated[folder].find(x => x.id === d.id);\n      setActiveDeck({\n        folder,\n        deck: newActiveDeckObj\n      });\n      return;\n    }\n\n    // ----------------- swiping in a learned deck -----------------\n    // folder like \"Learned_<X>\"\n    const sdIdx = (updated[folder] || []).findIndex(s => s.id === deck.id);\n    if (sdIdx === -1) return;\n    const sd = updated[folder][sdIdx];\n    if (direction === \"left\") {\n      // didn't know in learned deck: recall to original\n      sd.cards = sd.cards.filter(c => c.question !== currentCard.question);\n      const mainIdx = (updated[originalFolder] || []).findIndex(m => m.id === deck.id);\n      if (mainIdx >= 0) {\n        updated[originalFolder][mainIdx].cards.push(currentCard);\n        updated[originalFolder][mainIdx].finished = false;\n      } else {\n        // if original deck missing (rare), create it\n        if (!updated[originalFolder]) updated[originalFolder] = [];\n        updated[originalFolder].push({\n          id: deck.id,\n          name: sd.name,\n          cards: [currentCard],\n          stats: {\n            swipes: 0,\n            knew: 0,\n            didntKnow: 0\n          },\n          currentIndex: 0,\n          finished: false\n        });\n      }\n    } else {\n      // knew it in learned deck: remove permanently from learned deck\n      sd.cards = sd.cards.filter(c => c.question !== currentCard.question);\n    }\n\n    // if learned deck's cards become empty => remove that shadow deck object\n    if (sd.cards.length === 0) {\n      updated[folder].splice(sdIdx, 1);\n      if (updated[folder].length === 0) {\n        // keep or delete the folder? we'll keep empty folder arrays for predictable behavior\n        delete updated[folder];\n      }\n      setDecks(updated);\n      pushHistory(folder, sd.id, currentCard);\n      setActiveDeck(null); // close view if it was showing that now-empty learned deck\n      return;\n    }\n\n    // otherwise update sd index and commit\n    sd.finished = false;\n    sd.currentIndex = sd.currentIndex % sd.cards.length;\n    updated[folder][sdIdx] = sd;\n    setDecks(updated);\n    pushHistory(folder, sd.id, currentCard);\n    setActiveDeck({\n      folder,\n      deck: sd\n    });\n  };\n\n  // ------------------ Previous ------------------\n  const handlePrevious = () => {\n    if (history.length < 2) return;\n    // remove current from history (we want the last shown before current)\n    const newHist = [...history];\n    newHist.pop();\n    const last = newHist[newHist.length - 1];\n    setHistory(newHist);\n    if (!activeDeck) {\n      // if no active deck, try to open the folder the last belonged to\n      const {\n        folder: lastFolder,\n        deckId,\n        card\n      } = last;\n      // attempt to find deck object\n      const updated = JSON.parse(JSON.stringify(decks));\n      if (!updated[lastFolder]) return;\n      const dIndex = updated[lastFolder].findIndex(d => d.id === deckId);\n      if (dIndex === -1) return;\n      const d = updated[lastFolder][dIndex];\n      // find card in deck, else recall into deck front\n      const foundIndex = d.cards.findIndex(c => c.question === card.question);\n      if (foundIndex >= 0) {\n        d.currentIndex = foundIndex;\n      } else {\n        // remove from any learned decks and insert at front\n        Object.keys(updated).forEach(f => {\n          if (f.startsWith(\"Learned_\")) {\n            updated[f] = (updated[f] || []).map(sd => {\n              sd.cards = sd.cards.filter(c => c.question !== card.question);\n              return sd;\n            });\n          }\n        });\n        d.cards.unshift(card);\n        d.currentIndex = 0;\n        d.finished = false;\n      }\n      updated[lastFolder][dIndex] = d;\n      setDecks(updated);\n      setActiveDeck({\n        folder: lastFolder,\n        deck: d\n      });\n      return;\n    }\n\n    // active deck present\n    const {\n      folder,\n      deck\n    } = activeDeck;\n    const updated = JSON.parse(JSON.stringify(decks));\n    if (!updated[folder]) {\n      setActiveDeck(null);\n      return;\n    }\n    const dIndex = updated[folder].findIndex(d => d.id === deck.id);\n    if (dIndex === -1) {\n      setActiveDeck(null);\n      return;\n    }\n    const d = updated[folder][dIndex];\n\n    // check if last.card exists inside this deck\n    const foundIndex = d.cards.findIndex(c => c.question === last.card.question);\n    if (foundIndex >= 0) {\n      d.currentIndex = foundIndex;\n    } else {\n      // recall: remove card from any learned decks where it might be present\n      Object.keys(updated).forEach(f => {\n        if (f.startsWith(\"Learned_\")) {\n          updated[f] = (updated[f] || []).map(sd => {\n            sd.cards = sd.cards.filter(c => c.question !== last.card.question);\n            return sd;\n          });\n        }\n      });\n\n      // insert at front of the active deck\n      d.cards.unshift(last.card);\n      d.currentIndex = 0;\n      d.finished = false;\n    }\n    updated[folder][dIndex] = d;\n    setDecks(updated);\n    setActiveDeck({\n      folder,\n      deck: d\n    });\n  };\n\n  // ------------------ Reset deck ------------------\n  // If folder is a learned folder, move its cards back to main deck; if main, move all learned back\n  const handleReset = (deckId, folder) => {\n    setDecks(prev => {\n      const updated = JSON.parse(JSON.stringify(prev));\n      // if it's a learned folder\n      if (folder.startsWith(\"Learned_\")) {\n        const mainFolder = folder.replace(\"Learned_\", \"\");\n        if (!updated[folder]) return prev;\n        const sdIndex = updated[folder].findIndex(d => d.id === deckId);\n        const mainIndex = (updated[mainFolder] || []).findIndex(d => d.id === deckId);\n        if (sdIndex === -1 || mainIndex === -1) return prev;\n        // move cards\n        updated[mainFolder][mainIndex].cards = [...updated[mainFolder][mainIndex].cards, ...updated[folder][sdIndex].cards];\n        updated[mainFolder][mainIndex].finished = false;\n        // clear shadow deck entry\n        updated[folder][sdIndex].cards = [];\n        // remove the shadow deck object\n        updated[folder].splice(sdIndex, 1);\n        if (updated[folder].length === 0) delete updated[folder];\n        return updated;\n      }\n\n      // else main/original folder\n      if (!updated[folder]) return prev;\n      const dIndex = updated[folder].findIndex(d => d.id === deckId);\n      if (dIndex === -1) return prev;\n      const learnedList = updated[`Learned_${folder}`] || [];\n      const learnedDeck = learnedList.find(ld => ld.id === deckId);\n      if (learnedDeck) {\n        // move all learned cards back and clear learned deck\n        updated[folder][dIndex].cards = [...updated[folder][dIndex].cards, ...learnedDeck.cards];\n        // remove that learned deck entry\n        updated[`Learned_${folder}`] = learnedList.filter(ld => ld.id !== deckId);\n        if (updated[`Learned_${folder}`].length === 0) {\n          delete updated[`Learned_${folder}`];\n        }\n      }\n      // reset stats and state on main deck\n      updated[folder][dIndex].stats = {\n        swipes: 0,\n        knew: 0,\n        didntKnow: 0\n      };\n      updated[folder][dIndex].currentIndex = 0;\n      updated[folder][dIndex].finished = false;\n      return updated;\n    });\n\n    // If currently viewing that deck, adjust active view\n    if (activeDeck && activeDeck.deck.id === deckId) {\n      setActiveDeck(prev => {\n        if (!prev) return prev;\n        return {\n          folder,\n          deck: {\n            ...prev.deck,\n            currentIndex: 0,\n            finished: false\n          }\n        };\n      });\n    }\n  };\n\n  // ------------------ Delete deck ------------------\n  const handleDeleteDeck = (deckId, folder) => {\n    setDecks(prev => {\n      const updated = JSON.parse(JSON.stringify(prev));\n      if (updated[folder]) {\n        updated[folder] = updated[folder].filter(d => d.id !== deckId);\n      }\n      const shadow = `Learned_${folder}`;\n      if (updated[shadow]) {\n        updated[shadow] = updated[shadow].filter(d => d.id !== deckId);\n        if (updated[shadow].length === 0) delete updated[shadow];\n      }\n      return updated;\n    });\n    if (activeDeck && activeDeck.deck.id === deckId) setActiveDeck(null);\n  };\n\n  // ------------------ Active deck view ------------------\n  if (activeDeck) {\n    const {\n      folder,\n      deck\n    } = activeDeck;\n    const noCardsLeft = !deck.cards || deck.cards.length === 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveDeck(null),\n        className: \"mb-4 px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400 transition\",\n        children: \"\\u2B05 Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-2\",\n        children: [\"\\uD83D\\uDCDA \", deck.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-4\",\n        children: deck.finished || noCardsLeft ? \"✅ Deck Completed\" : `${deck.cards.length} cards left`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), !deck.finished && !noCardsLeft && deck.cards[deck.currentIndex] && /*#__PURE__*/_jsxDEV(Flashcard, {\n        question: deck.cards[deck.currentIndex].question,\n        answer: deck.cards[deck.currentIndex].answer,\n        onSwipe: handleSwipe,\n        canGoPrevious: history.length > 1,\n        onPrevious: handlePrevious\n      }, `${deck.id}-${deck.currentIndex}-${deck.cards.length}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this);\n  }\n\n  // ------------------ HOME view ------------------\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-6\",\n      children: \"\\uD83D\\uDCC2 Flashcard Decks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileUpload,\n      className: \"mb-6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: showFolderInput ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-2 justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newFolderName,\n          onChange: e => setNewFolderName(e.target.value),\n          placeholder: \"Folder name\",\n          className: \"border px-2 py-1 rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateFolder,\n          className: \"px-4 py-1 bg-green-500 text-white rounded hover:bg-green-600\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowFolderInput(false),\n          className: \"px-4 py-1 bg-gray-400 text-white rounded hover:bg-gray-500\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowFolderInput(true),\n        className: \"px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600\",\n        children: \"\\u2795 Create New Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"\\uD83D\\uDCC4 Uncategorized Decks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-4 items-center\",\n        children: (decks[\"Uncategorized\"] || []).map(d => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-4 items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveDeck({\n              folder: \"Uncategorized\",\n              deck: d\n            }),\n            className: \"px-6 py-3 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 transition\",\n            children: [d.name, \" (\", d.cards.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => moveDeckToFolder(d.id, \"Uncategorized\", e.target.value),\n            defaultValue: \"\",\n            className: \"border px-2 py-1 rounded\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Move to...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 15\n            }, this), Object.keys(decks).filter(f => !f.startsWith(\"Learned_\")).map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: f,\n              children: f\n            }, f, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleReset(d.id, \"Uncategorized\"),\n            className: \"px-3 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition\",\n            children: \"\\uD83D\\uDD04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteDeck(d.id, \"Uncategorized\"),\n            className: \"px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\",\n            children: \"\\uD83D\\uDDD1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this)]\n        }, d.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 5\n    }, this), (decks[\"Learned_Uncategorized\"] || []).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold\",\n        children: \"\\uD83D\\uDCD8 Learned Decks (Uncategorized)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-4 items-center\",\n        children: (decks[\"Learned_Uncategorized\"] || []).map(ld => ld.cards && ld.cards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-4 items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveDeck({\n              folder: \"Learned_Uncategorized\",\n              deck: ld\n            }),\n            className: \"px-6 py-3 bg-green-500 text-white font-semibold rounded-lg shadow-md hover:bg-green-600 transition\",\n            children: [ld.name, \" (Learned) (\", ld.cards.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 15\n          }, this)\n        }, \"learned-\" + ld.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 3\n    }, this), Object.keys(decks).filter(f => f !== \"Uncategorized\" && !f.startsWith(\"Learned_\")).map(folder => {\n      var _decks$folder;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: () => setExpandedFolders(prev => prev.has(folder) ? new Set([...prev].filter(x => x !== folder)) : new Set(prev).add(folder)),\n          className: \"text-xl font-bold mb-4 flex items-center justify-center gap-4 cursor-pointer\",\n          children: [\"\\uD83D\\uDCC1 \", folder, \" (\", ((_decks$folder = decks[folder]) === null || _decks$folder === void 0 ? void 0 : _decks$folder.length) || 0, \" decks)\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => {\n              e.stopPropagation();\n              if (window.confirm(`Are you sure you want to delete the folder \"${folder}\" and all its decks (including its Learned decks)?`)) {\n                setDecks(prev => {\n                  const updated = JSON.parse(JSON.stringify(prev));\n                  delete updated[folder];\n                  delete updated[`Learned_${folder}`];\n                  return updated;\n                });\n              }\n            },\n            className: \"px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600 transition text-sm\",\n            children: \"Delete Folder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 11\n        }, this), expandedFolders.has(folder) && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col gap-4 items-center\",\n            children: (decks[folder] || []).map(d => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex gap-4 items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setActiveDeck({\n                  folder,\n                  deck: d\n                }),\n                className: \"px-6 py-3 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 transition\",\n                children: [d.name, \" (\", d.cards.length, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                onChange: e => moveDeckToFolder(d.id, folder, e.target.value),\n                defaultValue: \"\",\n                className: \"border px-2 py-1 rounded\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  disabled: true,\n                  children: \"Move to...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 644,\n                  columnNumber: 23\n                }, this), Object.keys(decks).filter(f => !f.startsWith(\"Learned_\")).map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: f,\n                  children: f\n                }, f, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 650,\n                  columnNumber: 27\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 639,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleReset(d.id, folder),\n                className: \"px-3 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition\",\n                children: \"\\uD83D\\uDD04\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 655,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteDeck(d.id, folder),\n                className: \"px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\",\n                children: \"\\uD83D\\uDDD1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 661,\n                columnNumber: 21\n              }, this)]\n            }, d.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-lg font-semibold\",\n              children: \"\\uD83D\\uDCD8 Learned Decks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 17\n            }, this), (decks[`Learned_${folder}`] || []).map(ld => ld.cards && ld.cards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex gap-4 items-center mt-2\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setActiveDeck({\n                  folder: `Learned_${folder}`,\n                  deck: ld\n                }),\n                className: \"px-6 py-3 bg-green-500 text-white font-semibold rounded-lg shadow-md hover:bg-green-600 transition\",\n                children: [ld.name, \" (Learned) (\", ld.cards.length, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 25\n              }, this)\n            }, \"learned-\" + ld.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 678,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, folder, true, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 483,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"lt/V9UMnqi2AHSa/jnfcU6FGHmo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Papa","Flashcard","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","decks","setDecks","Uncategorized","Learned_Uncategorized","activeDeck","setActiveDeck","history","setHistory","showFolderInput","setShowFolderInput","newFolderName","setNewFolderName","expandedFolders","setExpandedFolders","Set","saved","localStorage","getItem","JSON","parse","setItem","stringify","ensureShadowFolder","folder","shadow","prev","handleFileUpload","event","_event$target$files","file","target","files","header","skipEmptyLines","complete","results","parsedCards","data","filter","row","question","Question","map","trim","answer","Answer","c","length","newDeck","id","Date","now","name","replace","cards","stats","swipes","knew","didntKnow","currentIndex","finished","updated","handleCreateFolder","moveDeckToFolder","deckId","fromFolder","toFolder","idx","findIndex","d","moved","splice","push","shadowFrom","shadowTo","sidx","sd","sdMoved","toggleFolder","newSet","has","delete","add","pushHistory","card","handleSwipe","direction","deck","Array","isArray","currentCard","isShadow","startsWith","originalFolder","learnedFolder","dIdx","sdList","find","s","Object","keys","forEach","f","newActiveDeckObj","x","sdIdx","mainIdx","m","handlePrevious","newHist","pop","last","lastFolder","dIndex","foundIndex","unshift","handleReset","mainFolder","sdIndex","mainIndex","learnedList","learnedDeck","ld","handleDeleteDeck","noCardsLeft","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSwipe","canGoPrevious","onPrevious","type","accept","onChange","value","e","placeholder","defaultValue","disabled","_decks$folder","stopPropagation","window","confirm","_c","$RefreshReg$"],"sources":["C:/Users/KULDEEP/Downloads/flashcard-web-app-full/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport Flashcard from \"./components/Flashcard\";\n\nfunction App() {\n  const [decks, setDecks] = useState({\n    Uncategorized: [],\n    Learned_Uncategorized: [],\n  });\n  const [activeDeck, setActiveDeck] = useState(null); // { folder, deck }\n  const [history, setHistory] = useState([]); // array of { folder, deckId, card }\n  const [showFolderInput, setShowFolderInput] = useState(false);\n  const [newFolderName, setNewFolderName] = useState(\"\");\n  const [expandedFolders, setExpandedFolders] = useState(new Set());\n\n\n  // Load/save\n  useEffect(() => {\n    const saved = localStorage.getItem(\"flashcardDecks\");\n    if (saved) {\n      try {\n        setDecks(JSON.parse(saved));\n      } catch {\n        // ignore parse issues\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"flashcardDecks\", JSON.stringify(decks));\n  }, [decks]);\n\n  // Ensure a learned shadow folder exists (uses setDecks updater to avoid stale reads)\n  const ensureShadowFolder = (folder) => {\n    const shadow = `Learned_${folder}`;\n    setDecks((prev) => {\n      if (prev[shadow]) return prev;\n      return { ...prev, [shadow]: [] };\n    });\n  };\n\n  // File upload\n  const handleFileUpload = (event) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (results) => {\n        const parsedCards = (results.data || [])\n          .filter((row) => row.question || row.Question)\n          .map((row) => ({\n            question: (row.question || row.Question || \"\").trim(),\n            answer: (row.answer || row.Answer || \"\").trim(),\n          }))\n          .filter((c) => c.question && c.answer);\n\n        if (!parsedCards.length) return;\n\n        const newDeck = {\n          id: Date.now(),\n          name: file.name.replace(\".csv\", \"\"),\n          cards: parsedCards,\n          stats: { swipes: 0, knew: 0, didntKnow: 0 },\n          currentIndex: 0,\n          finished: false,\n        };\n\n        setDecks((prev) => {\n          const updated = JSON.parse(JSON.stringify(prev));\n          updated.Uncategorized = [...(updated.Uncategorized || []), newDeck];\n          if (!updated[\"Learned_Uncategorized\"]) updated[\"Learned_Uncategorized\"] = [];\n          return updated;\n        });\n      },\n    });\n  };\n\n  // Create folder (creates its learned_ sibling)\n  const handleCreateFolder = () => {\n    const name = newFolderName?.trim();\n    if (!name) return;\n    setDecks((prev) => {\n      if (prev[name]) return prev; // already exists\n      const updated = JSON.parse(JSON.stringify(prev));\n      updated[name] = [];\n      updated[`Learned_${name}`] = [];\n      return updated;\n    });\n    setNewFolderName(\"\");\n    setShowFolderInput(false);\n  };\n\n  // Move deck between folders (also move its learned shadow deck entry)\n  const moveDeckToFolder = (deckId, fromFolder, toFolder) => {\n    if (!toFolder || fromFolder === toFolder) return;\n    setDecks((prev) => {\n      const updated = JSON.parse(JSON.stringify(prev));\n      if (!updated[fromFolder]) return prev;\n      const idx = updated[fromFolder].findIndex((d) => d.id === deckId);\n      if (idx === -1) return prev;\n      const [moved] = updated[fromFolder].splice(idx, 1);\n      if (!updated[toFolder]) updated[toFolder] = [];\n      updated[toFolder].push(moved);\n\n      // move shadow deck entry if present\n      const shadowFrom = `Learned_${fromFolder}`;\n      const shadowTo = `Learned_${toFolder}`;\n      if (updated[shadowFrom]) {\n        const sidx = updated[shadowFrom].findIndex((sd) => sd.id === deckId);\n        if (sidx !== -1) {\n          const [sdMoved] = updated[shadowFrom].splice(sidx, 1);\n          if (!updated[shadowTo]) updated[shadowTo] = [];\n          updated[shadowTo].push(sdMoved);\n          if (updated[shadowFrom].length === 0) delete updated[shadowFrom];\n        }\n      } else {\n        if (!updated[shadowTo]) updated[shadowTo] = [];\n      }\n\n      return updated;\n    });\n  };\n\n   //Toggle between folders\n  const toggleFolder = (folder) => {\n  setExpandedFolders(prev => {\n    const newSet = new Set(prev);\n    if (newSet.has(folder)) {\n      newSet.delete(folder);\n    } else {\n      newSet.add(folder);\n    }\n    return newSet;\n  });\n};\n\n  // Helper: push to history\n  const pushHistory = (folder, deckId, card) => {\n    setHistory((prev) => [...prev, { folder, deckId, card }]);\n  };\n\n  // ------------------ Swipe handler ------------------\n  const handleSwipe = (direction) => {\n    if (!activeDeck) return;\n    const { folder, deck } = activeDeck;\n    if (!deck || !Array.isArray(deck.cards)) return;\n    const currentCard = deck.cards[deck.currentIndex];\n    if (!currentCard) return;\n\n    const isShadow = folder.startsWith(\"Learned_\");\n    const originalFolder = isShadow ? folder.replace(\"Learned_\", \"\") : folder;\n    const learnedFolder = `Learned_${originalFolder}`;\n\n    // deep clone\n    const updated = JSON.parse(JSON.stringify(decks));\n    if (!updated[originalFolder]) {\n      // safety: nothing to do\n      return;\n    }\n    if (!updated[learnedFolder]) updated[learnedFolder] = [];\n\n    // working with main deck\n    if (!isShadow) {\n      const dIdx = updated[folder].findIndex((d) => d.id === deck.id);\n      if (dIdx === -1) return;\n      const d = updated[folder][dIdx];\n      d.stats = d.stats || { swipes: 0, knew: 0, didntKnow: 0 };\n      d.stats.swipes++;\n\n      if (direction === \"right\") {\n        // Knew it: remove from main deck, add to learned_<folder>\n        d.stats.knew = (d.stats.knew || 0) + 1;\n        // remove the card at currentIndex\n        d.cards.splice(deck.currentIndex, 1);\n\n        // find or create learned shadow deck entry with same id\n        let sdList = updated[learnedFolder];\n        let sd = sdList.find((s) => s.id === d.id);\n        if (sd) {\n          sd.cards.push(currentCard);\n          sd.finished = false;\n        } else {\n          sdList.push({\n            id: d.id,\n            name: d.name,\n            cards: [currentCard],\n            stats: { swipes: 0, knew: 0, didntKnow: 0 },\n            currentIndex: 0,\n            finished: false,\n          });\n        }\n      } else {\n        // Didn't know in main deck: remove and add to end\n        d.stats.didntKnow = (d.stats.didntKnow || 0) + 1;\n        d.cards.splice(deck.currentIndex, 1);\n        d.cards.push(currentCard);\n        // ensure card is not lingering in any learned deck\n        Object.keys(updated).forEach((f) => {\n          if (f.startsWith(\"Learned_\")) {\n            updated[f] = (updated[f] || []).map((sd) => {\n              sd.cards = sd.cards.filter((c) => c.question !== currentCard.question);\n              return sd;\n            });\n          }\n        });\n      }\n\n      // adjust finished & index\n      if (d.cards.length === 0) {\n        d.finished = true;\n        d.currentIndex = 0;\n      } else {\n        d.finished = false;\n        // if we removed a card that had index >= length, reset to 0\n        d.currentIndex = d.currentIndex % d.cards.length;\n      }\n\n      // commit\n      updated[folder][dIdx] = d;\n      setDecks(updated);\n      pushHistory(folder, d.id, currentCard);\n\n      // set the active deck to the updated deck object (fresh reference)\n      const newActiveDeckObj = updated[folder].find((x) => x.id === d.id);\n      setActiveDeck({ folder, deck: newActiveDeckObj });\n      return;\n    }\n\n    // ----------------- swiping in a learned deck -----------------\n    // folder like \"Learned_<X>\"\n    const sdIdx = (updated[folder] || []).findIndex((s) => s.id === deck.id);\n    if (sdIdx === -1) return;\n    const sd = updated[folder][sdIdx];\n\n    if (direction === \"left\") {\n      // didn't know in learned deck: recall to original\n      sd.cards = sd.cards.filter((c) => c.question !== currentCard.question);\n      const mainIdx = (updated[originalFolder] || []).findIndex((m) => m.id === deck.id);\n      if (mainIdx >= 0) {\n        updated[originalFolder][mainIdx].cards.push(currentCard);\n        updated[originalFolder][mainIdx].finished = false;\n      } else {\n        // if original deck missing (rare), create it\n        if (!updated[originalFolder]) updated[originalFolder] = [];\n        updated[originalFolder].push({\n          id: deck.id,\n          name: sd.name,\n          cards: [currentCard],\n          stats: { swipes: 0, knew: 0, didntKnow: 0 },\n          currentIndex: 0,\n          finished: false,\n        });\n      }\n    } else {\n      // knew it in learned deck: remove permanently from learned deck\n      sd.cards = sd.cards.filter((c) => c.question !== currentCard.question);\n    }\n\n    // if learned deck's cards become empty => remove that shadow deck object\n    if (sd.cards.length === 0) {\n      updated[folder].splice(sdIdx, 1);\n      if (updated[folder].length === 0) {\n        // keep or delete the folder? we'll keep empty folder arrays for predictable behavior\n        delete updated[folder];\n      }\n      setDecks(updated);\n      pushHistory(folder, sd.id, currentCard);\n      setActiveDeck(null); // close view if it was showing that now-empty learned deck\n      return;\n    }\n\n    // otherwise update sd index and commit\n    sd.finished = false;\n    sd.currentIndex = sd.currentIndex % sd.cards.length;\n    updated[folder][sdIdx] = sd;\n    setDecks(updated);\n    pushHistory(folder, sd.id, currentCard);\n    setActiveDeck({ folder, deck: sd });\n  };\n\n  // ------------------ Previous ------------------\n  const handlePrevious = () => {\n    if (history.length < 2) return;\n    // remove current from history (we want the last shown before current)\n    const newHist = [...history];\n    newHist.pop();\n    const last = newHist[newHist.length - 1];\n    setHistory(newHist);\n\n    if (!activeDeck) {\n      // if no active deck, try to open the folder the last belonged to\n      const { folder: lastFolder, deckId, card } = last;\n      // attempt to find deck object\n      const updated = JSON.parse(JSON.stringify(decks));\n      if (!updated[lastFolder]) return;\n      const dIndex = updated[lastFolder].findIndex((d) => d.id === deckId);\n      if (dIndex === -1) return;\n      const d = updated[lastFolder][dIndex];\n      // find card in deck, else recall into deck front\n      const foundIndex = d.cards.findIndex((c) => c.question === card.question);\n      if (foundIndex >= 0) {\n        d.currentIndex = foundIndex;\n      } else {\n        // remove from any learned decks and insert at front\n        Object.keys(updated).forEach((f) => {\n          if (f.startsWith(\"Learned_\")) {\n            updated[f] = (updated[f] || []).map((sd) => {\n              sd.cards = sd.cards.filter((c) => c.question !== card.question);\n              return sd;\n            });\n          }\n        });\n        d.cards.unshift(card);\n        d.currentIndex = 0;\n        d.finished = false;\n      }\n      updated[lastFolder][dIndex] = d;\n      setDecks(updated);\n      setActiveDeck({ folder: lastFolder, deck: d });\n      return;\n    }\n\n    // active deck present\n    const { folder, deck } = activeDeck;\n    const updated = JSON.parse(JSON.stringify(decks));\n    if (!updated[folder]) {\n      setActiveDeck(null);\n      return;\n    }\n    const dIndex = updated[folder].findIndex((d) => d.id === deck.id);\n    if (dIndex === -1) {\n      setActiveDeck(null);\n      return;\n    }\n    const d = updated[folder][dIndex];\n\n    // check if last.card exists inside this deck\n    const foundIndex = d.cards.findIndex((c) => c.question === last.card.question);\n    if (foundIndex >= 0) {\n      d.currentIndex = foundIndex;\n    } else {\n      // recall: remove card from any learned decks where it might be present\n      Object.keys(updated).forEach((f) => {\n        if (f.startsWith(\"Learned_\")) {\n          updated[f] = (updated[f] || []).map((sd) => {\n            sd.cards = sd.cards.filter((c) => c.question !== last.card.question);\n            return sd;\n          });\n        }\n      });\n\n      // insert at front of the active deck\n      d.cards.unshift(last.card);\n      d.currentIndex = 0;\n      d.finished = false;\n    }\n\n    updated[folder][dIndex] = d;\n    setDecks(updated);\n    setActiveDeck({ folder, deck: d });\n  };\n\n  // ------------------ Reset deck ------------------\n  // If folder is a learned folder, move its cards back to main deck; if main, move all learned back\n  const handleReset = (deckId, folder) => {\n    setDecks((prev) => {\n      const updated = JSON.parse(JSON.stringify(prev));\n      // if it's a learned folder\n      if (folder.startsWith(\"Learned_\")) {\n        const mainFolder = folder.replace(\"Learned_\", \"\");\n        if (!updated[folder]) return prev;\n        const sdIndex = updated[folder].findIndex((d) => d.id === deckId);\n        const mainIndex = (updated[mainFolder] || []).findIndex((d) => d.id === deckId);\n        if (sdIndex === -1 || mainIndex === -1) return prev;\n        // move cards\n        updated[mainFolder][mainIndex].cards = [\n          ...updated[mainFolder][mainIndex].cards,\n          ...updated[folder][sdIndex].cards,\n        ];\n        updated[mainFolder][mainIndex].finished = false;\n        // clear shadow deck entry\n        updated[folder][sdIndex].cards = [];\n        // remove the shadow deck object\n        updated[folder].splice(sdIndex, 1);\n        if (updated[folder].length === 0) delete updated[folder];\n        return updated;\n      }\n\n      // else main/original folder\n      if (!updated[folder]) return prev;\n      const dIndex = updated[folder].findIndex((d) => d.id === deckId);\n      if (dIndex === -1) return prev;\n      const learnedList = updated[`Learned_${folder}`] || [];\n      const learnedDeck = learnedList.find((ld) => ld.id === deckId);\n      if (learnedDeck) {\n        // move all learned cards back and clear learned deck\n        updated[folder][dIndex].cards = [\n          ...updated[folder][dIndex].cards,\n          ...learnedDeck.cards,\n        ];\n        // remove that learned deck entry\n        updated[`Learned_${folder}`] = learnedList.filter((ld) => ld.id !== deckId);\n        if (updated[`Learned_${folder}`].length === 0) {\n          delete updated[`Learned_${folder}`];\n        }\n      }\n      // reset stats and state on main deck\n      updated[folder][dIndex].stats = { swipes: 0, knew: 0, didntKnow: 0 };\n      updated[folder][dIndex].currentIndex = 0;\n      updated[folder][dIndex].finished = false;\n      return updated;\n    });\n\n    // If currently viewing that deck, adjust active view\n    if (activeDeck && activeDeck.deck.id === deckId) {\n      setActiveDeck((prev) => {\n        if (!prev) return prev;\n        return {\n          folder,\n          deck: {\n            ...prev.deck,\n            currentIndex: 0,\n            finished: false,\n          },\n        };\n      });\n    }\n  };\n\n  // ------------------ Delete deck ------------------\n  const handleDeleteDeck = (deckId, folder) => {\n    setDecks((prev) => {\n      const updated = JSON.parse(JSON.stringify(prev));\n      if (updated[folder]) {\n        updated[folder] = updated[folder].filter((d) => d.id !== deckId);\n      }\n      const shadow = `Learned_${folder}`;\n      if (updated[shadow]) {\n        updated[shadow] = updated[shadow].filter((d) => d.id !== deckId);\n        if (updated[shadow].length === 0) delete updated[shadow];\n      }\n      return updated;\n    });\n    if (activeDeck && activeDeck.deck.id === deckId) setActiveDeck(null);\n  };\n\n  // ------------------ Active deck view ------------------\n  if (activeDeck) {\n    const { folder, deck } = activeDeck;\n    const noCardsLeft = !deck.cards || deck.cards.length === 0;\n    return (\n      <div className=\"p-6 text-center\">\n        <button\n          onClick={() => setActiveDeck(null)}\n          className=\"mb-4 px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400 transition\"\n        >\n          ⬅ Back to Home\n        </button>\n\n        <h1 className=\"text-2xl font-bold mb-2\">📚 {deck.name}</h1>\n        <p className=\"text-gray-600 mb-4\">\n          {deck.finished || noCardsLeft ? \"✅ Deck Completed\" : `${deck.cards.length} cards left`}\n        </p>\n\n        {!deck.finished && !noCardsLeft && deck.cards[deck.currentIndex] && (\n          <Flashcard\n            key={`${deck.id}-${deck.currentIndex}-${deck.cards.length}`}\n            question={deck.cards[deck.currentIndex].question}\n            answer={deck.cards[deck.currentIndex].answer}\n            onSwipe={handleSwipe}\n            canGoPrevious={history.length > 1}\n            onPrevious={handlePrevious}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // ------------------ HOME view ------------------\nreturn (\n  <div className=\"p-6 text-center\">\n    <h1 className=\"text-3xl font-bold mb-6\">📂 Flashcard Decks</h1>\n    <input type=\"file\" accept=\".csv\" onChange={handleFileUpload} className=\"mb-6\" />\n\n    <div className=\"mb-6\">\n      {showFolderInput ? (\n        <div className=\"flex gap-2 justify-center\">\n          <input\n            type=\"text\"\n            value={newFolderName}\n            onChange={(e) => setNewFolderName(e.target.value)}\n            placeholder=\"Folder name\"\n            className=\"border px-2 py-1 rounded\"\n          />\n          <button\n            onClick={handleCreateFolder}\n            className=\"px-4 py-1 bg-green-500 text-white rounded hover:bg-green-600\"\n          >\n            Add\n          </button>\n          <button\n            onClick={() => setShowFolderInput(false)}\n            className=\"px-4 py-1 bg-gray-400 text-white rounded hover:bg-gray-500\"\n          >\n            Cancel\n          </button>\n        </div>\n      ) : (\n        <button\n          onClick={() => setShowFolderInput(true)}\n          className=\"px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600\"\n        >\n          ➕ Create New Folder\n        </button>\n      )}\n    </div>\n\n    {/* ================= UNCATEGORIZED DECKS ================= */}\n    <div className=\"mb-10\">\n      <h2 className=\"text-xl font-bold mb-4\">📄 Uncategorized Decks</h2>\n      <div className=\"flex flex-col gap-4 items-center\">\n        {(decks[\"Uncategorized\"] || []).map((d) => (\n          <div key={d.id} className=\"flex gap-4 items-center\">\n            <button\n              onClick={() => setActiveDeck({ folder: \"Uncategorized\", deck: d })}\n              className=\"px-6 py-3 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 transition\"\n            >\n              {d.name} ({d.cards.length})\n            </button>\n            <select\n              onChange={(e) => moveDeckToFolder(d.id, \"Uncategorized\", e.target.value)}\n              defaultValue=\"\"\n              className=\"border px-2 py-1 rounded\"\n            >\n              <option value=\"\" disabled>\n                Move to...\n              </option>\n              {Object.keys(decks)\n                .filter((f) => !f.startsWith(\"Learned_\"))\n                .map((f) => (\n                  <option key={f} value={f}>\n                    {f}\n                  </option>\n                ))}\n            </select>\n            <button\n              onClick={() => handleReset(d.id, \"Uncategorized\")}\n              className=\"px-3 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition\"\n            >\n              🔄\n            </button>\n            <button\n              onClick={() => handleDeleteDeck(d.id, \"Uncategorized\")}\n              className=\"px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\"\n            >\n              🗑\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n{/* ================= LEARNED UNCATEGORIZED ================= */}\n{(decks[\"Learned_Uncategorized\"] || []).length > 0 && (\n  <div className=\"mb-10\">\n    <h3 className=\"text-lg font-semibold\">📘 Learned Decks (Uncategorized)</h3>\n    <div className=\"flex flex-col gap-4 items-center\">\n      {(decks[\"Learned_Uncategorized\"] || []).map(\n        (ld) =>\n          ld.cards &&\n          ld.cards.length > 0 && (\n            <div key={\"learned-\" + ld.id} className=\"flex gap-4 items-center\">\n              <button\n                onClick={() =>\n                  setActiveDeck({ folder: \"Learned_Uncategorized\", deck: ld })\n                }\n                className=\"px-6 py-3 bg-green-500 text-white font-semibold rounded-lg shadow-md hover:bg-green-600 transition\"\n              >\n                {ld.name} (Learned) ({ld.cards.length})\n              </button>\n            </div>\n          )\n      )}\n    </div>\n  </div>\n)}\n\n\n    {/* ================= FOLDERS ================= */}\n    {Object.keys(decks)\n      .filter((f) => f !== \"Uncategorized\" && !f.startsWith(\"Learned_\"))\n      .map((folder) => (\n        <div key={folder} className=\"mb-8\">\n          {/* Folder header */}\n          <h2\n            onClick={() =>\n              setExpandedFolders((prev) =>\n                prev.has(folder) ? new Set([...prev].filter((x) => x !== folder)) : new Set(prev).add(folder)\n              )\n            }\n            className=\"text-xl font-bold mb-4 flex items-center justify-center gap-4 cursor-pointer\"\n          >\n            📁 {folder} ({decks[folder]?.length || 0} decks)\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                if (\n                  window.confirm(\n                    `Are you sure you want to delete the folder \"${folder}\" and all its decks (including its Learned decks)?`\n                  )\n                ) {\n                  setDecks((prev) => {\n                    const updated = JSON.parse(JSON.stringify(prev));\n                    delete updated[folder];\n                    delete updated[`Learned_${folder}`];\n                    return updated;\n                  });\n                }\n              }}\n              className=\"px-3 py-1 bg-red-500 text-white rounded-md hover:bg-red-600 transition text-sm\"\n            >\n              Delete Folder\n            </button>\n          </h2>\n\n          {/* Expanded folder contents */}\n          {expandedFolders.has(folder) && (\n            <>\n              <div className=\"flex flex-col gap-4 items-center\">\n                {(decks[folder] || []).map((d) => (\n                  <div key={d.id} className=\"flex gap-4 items-center\">\n                    <button\n                      onClick={() => setActiveDeck({ folder, deck: d })}\n                      className=\"px-6 py-3 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 transition\"\n                    >\n                      {d.name} ({d.cards.length})\n                    </button>\n                    <select\n                      onChange={(e) => moveDeckToFolder(d.id, folder, e.target.value)}\n                      defaultValue=\"\"\n                      className=\"border px-2 py-1 rounded\"\n                    >\n                      <option value=\"\" disabled>\n                        Move to...\n                      </option>\n                      {Object.keys(decks)\n                        .filter((f) => !f.startsWith(\"Learned_\"))\n                        .map((f) => (\n                          <option key={f} value={f}>\n                            {f}\n                          </option>\n                        ))}\n                    </select>\n                    <button\n                      onClick={() => handleReset(d.id, folder)}\n                      className=\"px-3 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition\"\n                    >\n                      🔄\n                    </button>\n                    <button\n                      onClick={() => handleDeleteDeck(d.id, folder)}\n                      className=\"px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\"\n                    >\n                      🗑\n                    </button>\n                  </div>\n                ))}\n              </div>\n\n              {/* Learned decks under this folder */}\n              <div className=\"mt-4\">\n                <h3 className=\"text-lg font-semibold\">📘 Learned Decks</h3>\n                {(decks[`Learned_${folder}`] || []).map(\n                  (ld) =>\n                    ld.cards &&\n                    ld.cards.length > 0 && (\n                      <div key={\"learned-\" + ld.id} className=\"flex gap-4 items-center mt-2\">\n                        <button\n                          onClick={() => setActiveDeck({ folder: `Learned_${folder}`, deck: ld })}\n                          className=\"px-6 py-3 bg-green-500 text-white font-semibold rounded-lg shadow-md hover:bg-green-600 transition\"\n                        >\n                          {ld.name} (Learned) ({ld.cards.length})\n                        </button>\n                      </div>\n                    )\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      ))}\n  </div>\n);\n}\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}